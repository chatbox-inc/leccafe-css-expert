{"remainingRequest":"/Users/mkkn/work/book/css-expert/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/mkkn/work/book/css-expert/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/mkkn/work/book/css-expert/pages/3.クラス名の管理.md?vue&type=template&id=974b1be0&","dependencies":[{"path":"/Users/mkkn/work/book/css-expert/pages/3.クラス名の管理.md","mtime":1546336528336},{"path":"/Users/mkkn/work/book/css-expert/node_modules/cache-loader/dist/cjs.js","mtime":1546347112879},{"path":"/Users/mkkn/work/book/css-expert/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1546347116044},{"path":"/Users/mkkn/work/book/css-expert/node_modules/cache-loader/dist/cjs.js","mtime":1546347112879},{"path":"/Users/mkkn/work/book/css-expert/node_modules/vue-loader/lib/index.js","mtime":1546347116044},{"path":"/Users/mkkn/work/book/css-expert/node_modules/@vuepress/markdown-loader/index.js","mtime":1546347404567}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"%E3%82%AF%E3%83%A9%E3%82%B9%E5%90%8D-%E3%81%A8-css-%E8%A8%AD%E8%A8%88\"><a class=\"header-anchor\" href=\"#%E3%82%AF%E3%83%A9%E3%82%B9%E5%90%8D-%E3%81%A8-css-%E8%A8%AD%E8%A8%88\" aria-hidden=\"true\">#</a> クラス名 と CSS 設計</h1>\n<p>CSS で正しくデザインを表現できたとしても、\n一つのデザインを表現するための CSS の書き方は様々なものがあります。</p>\n<p>複数人で作業を進める上では、わかりやすく、管理しやすい CSS の記述が必要不可欠です。</p>\n<p>ここでは CSS 設計を通じて、読みやすい・保守性の高い CSS の書き方について考えていきます。</p>\n<h2 id=\"smacss---css-%E3%81%AE%E3%83%AC%E3%82%A4%E3%83%A4%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\"><a class=\"header-anchor\" href=\"#smacss---css-%E3%81%AE%E3%83%AC%E3%82%A4%E3%83%A4%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\" aria-hidden=\"true\">#</a> SMACSS - CSS のレイヤを考える</h2>\n<p>デザインを一つの CSS に落とし込む上で、 CSS の構造について整理し理解するアプローチはとても重要です。</p>\n<p>Web サイト全体を要素ごとに漠然とスタイリングすると、\n不要な重複するコードが生またり、同じ意味合いのコードが複数箇所に分散したりと、\n冗長で読みにくく、メンテナンスし辛いコードが出来上がってしまいます。</p>\n<p>CSS の構造を考える上で、SMACSS が提供する 5 つのカテゴリーによる視点はとても重要な意味合いを持ちます。</p>\n<ul>\n<li>ベース\t要素そのもののデフォルトスタイル</li>\n<li>レイアウト\tページをエリアごとに分割するためのスタイル</li>\n<li>モジュール\t再利用可能なパーツごとのスタイル</li>\n<li>状態（ステート）\tレイアウトやモジュールの特定の状態を表現するスタイル</li>\n<li>テーマ\tサイトのルック＆フィールを提供するスタイル</li>\n</ul>\n<p>SMACSS(スマックス) は Scalable and Modular Architecture for CSS の略で、\n「CSSをより体系立て、より構造化させることで制作とメンテナンスをより容易に行うテクニック」として\n広く認知されている CSS 設計の考え方です。</p>\n<p><a href=\"https://smacss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://smacss.com/<OutboundLink/></a></p>\n<h3 id=\"%E3%83%99%E3%83%BC%E3%82%B9\"><a class=\"header-anchor\" href=\"#%E3%83%99%E3%83%BC%E3%82%B9\" aria-hidden=\"true\">#</a> ベース</h3>\n<p>サイト全体で利用される HTML 要素そのもののデフォルトのスタイルです。</p>\n<p>Normalize.css などの リセット CSS と呼ばれるものもここに位置します。</p>\n<p>ブラウザデフォルトの状態に依存するよりも、何らかの リセット CSS 導入しておくことで、\nブラウザごとの差異をなくしたり、コーディング上の指針を共通化することができるようになります。</p>\n<h3 id=\"%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88\"><a class=\"header-anchor\" href=\"#%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88\" aria-hidden=\"true\">#</a> レイアウト</h3>\n<p>サイト全体で適用されるような グリッドやカラムなどの 大きなレイアウトの定義は、\n詳細の CSS と分けて記述します。</p>\n<p>個々の CSS 定義が レイアウトに依存する形で記述されてしまうと、レイアウトの変更に応じて、\n個別のCSSを書き直すことになりかねません。</p>\n<p>保守性を考える上でも、レイアウトに関するルールは 個別の CSS から極力分離しておくほうが良いでしょう。</p>\n<h3 id=\"%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB\"><a class=\"header-anchor\" href=\"#%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB\" aria-hidden=\"true\">#</a> モジュール</h3>\n<p>再利用可能な ページ上で繰り返し利用される UI を定義します。</p>\n<p>画面上で表示するボタンや アラートなどの項目は、ページ全体での表示方式を共通化するために、\n同じクラス等を用いて表示を統一化するほうが良いでしょう。</p>\n<h3 id=\"%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88\"><a class=\"header-anchor\" href=\"#%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88\" aria-hidden=\"true\">#</a> ステート</h3>\n<p>ページ上で変化しうる状態を表現する CSS のクラスです。</p>\n<p>トグルボタンや、ナビゲーションの選択状態など、ユーザの入力に応じて活性非活性が変化する <code>.is-active</code> や\nバリデーションメッセージや、アラートなど、特定の条件を満たさない限り非表示とする <code>.is-hidden</code> などがこれに当たります。</p>\n<h3 id=\"%E3%83%86%E3%83%BC%E3%83%9E\"><a class=\"header-anchor\" href=\"#%E3%83%86%E3%83%BC%E3%83%9E\" aria-hidden=\"true\">#</a> テーマ</h3>\n<p>サイト内で利用する 色やフォントなどの 見た目・雰囲気を構成する要素を テーマとして分割して管理します。</p>\n<p>テーマを差し替えることにより、サイト全体の 雰囲気を微調整する事が可能になり、\nCSS の再利用性・柔軟性が向上します。</p>\n<h3 id=\"%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE-css\"><a class=\"header-anchor\" href=\"#%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE-css\" aria-hidden=\"true\">#</a> その他の CSS</h3>\n<p>SMACSS の関心は、「デザインの中で繰り返されるパターンを体系立てる」ことに関心が置かれているため、\n要素単位の個別のレイアウトなど再利用性のない個々のスタイリングは、「その他のCSS」 として記述していく必要があります。</p>\n<p>特に、要素が固有で持つべき マージンや 高さ・幅等の要素を、モジュールや テーマとして再利用可能な状態に置いてしまうと、\nCSS の再利用性が低下するなど、コーディングの柔軟性が大きく低下します。</p>\n<p>「何が共通化されるべきで、何を共通化すべきでないか」をしっかり検討し、\nデザイナー・顧客合わせて認識を統一することが、CSS の管理コスト低減に大きく貢献します。</p>\n<h2 id=\"css-%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%82%AF%E3%83%A9%E3%82%B9%E5%91%BD%E5%90%8D%E3%81%AE%E9%96%A2%E5%BF%83\"><a class=\"header-anchor\" href=\"#css-%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%82%AF%E3%83%A9%E3%82%B9%E5%91%BD%E5%90%8D%E3%81%AE%E9%96%A2%E5%BF%83\" aria-hidden=\"true\">#</a> CSS におけるクラス命名の関心</h2>\n<p>CSS では HTML 上のようそにクラス名をつけて、クラス名の単位でデザインを適用します。</p>\n<p>クラス名の管理はコード管理の上でとても重要であり、クラスの命名についての考え方が統一されていることは、\nコード管理上とても重要なことです。</p>\n<p>クラスの命名に関する考え方がバラバラだと、\n不要なコードの重複が生まれたり、意図しないクラス名の再利用が行われり、といった問題が発生するでしょう。</p>\n<p>クラスの命名 を考える上で 問題となる大きなテーマとして以下のようなものが挙げられます。</p>\n<ul>\n<li>再利用 vs 分割 クラス名は再利用されるべき、再利用されるべきでない</li>\n<li>複数クラス vs 単一クラス 単一の HTML 要素は ただ一つのクラス名を持つべき、複数のクラス名を許可する</li>\n<li>デザイン vs セマンティック クラス名は要素の見た目を表現する、要素の意味合いを表現する</li>\n</ul>\n<p>こういったコーディング上の考え方の違いが一つのサイト内で統一されていないと、\nサイト全体でのクラス名の考え方に大きなブレが生じ、コーディング上の支障をもたらしてくるでしょう。</p>\n<p>まずは、要素の何に対してクラス名をつけるか、という点について考えてみましょう。</p>\n<h3 id=\"%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E3%81%A4%E3%81%91%E3%82%8B\"><a class=\"header-anchor\" href=\"#%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E3%81%A4%E3%81%91%E3%82%8B\" aria-hidden=\"true\">#</a> デザインに対してつける</h3>\n<p>要素に適用されるデザインに対して 名前をつける方法</p>\n<p>お問い合わせの赤いボタンの場合 <code>red</code> <code>bordered</code> などの クラス名がつく。</p>\n<h3 id=\"ui%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E3%81%A4%E3%81%91%E3%82%8B\"><a class=\"header-anchor\" href=\"#ui%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E3%81%A4%E3%81%91%E3%82%8B\" aria-hidden=\"true\">#</a> UIに対してつける</h3>\n<p>要素がユーザに対して提供するページ上の機能に対して 名前をつける方法</p>\n<p>お問い合わせの赤いボタンの場合 <code>btn</code> などの クラス名がつく。</p>\n<h3 id=\"%E3%82%A2%E3%82%A6%E3%83%88%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E3%81%A4%E3%81%91%E3%82%8B\"><a class=\"header-anchor\" href=\"#%E3%82%A2%E3%82%A6%E3%83%88%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E3%81%A4%E3%81%91%E3%82%8B\" aria-hidden=\"true\">#</a> アウトラインに対してつける</h3>\n<p>要素の ページ上での意味合いに対して 名前をつける方法</p>\n<p>お問い合わせの赤いボタンの場合 <code>contact-action</code> などの クラス名がつく。</p>\n<h2 id=\"%E6%A7%98%E3%80%85%E3%81%AA-css-%E8%A8%AD%E8%A8%88\"><a class=\"header-anchor\" href=\"#%E6%A7%98%E3%80%85%E3%81%AA-css-%E8%A8%AD%E8%A8%88\" aria-hidden=\"true\">#</a> 様々な CSS 設計</h2>\n<h3 id=\"%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E5%90%8D%E5%89%8D%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E8%80%83%E3%81%88%E6%96%B9\"><a class=\"header-anchor\" href=\"#%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E5%90%8D%E5%89%8D%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E8%80%83%E3%81%88%E6%96%B9\" aria-hidden=\"true\">#</a> デザインに対して名前をつける考え方</h3>\n<p><code>red</code> や <code>mt20</code> など CSS に直結するクラスを作成して、組み合わせて使う方法です。</p>\n<p>わかりやすく、利用しやすい一方で共通のCSS部分のメンテナンスが難しく、\nHTML 要素に付与されるクラスも多くなりがちと言った問題があります。</p>\n<p>運用上の理由で、例えば <code>red</code> に <code>font-weight</code> が設定されてしまったり、\n多様な赤を表現するために、<code>red</code> の他に <code>red2</code> <code>red3</code> などのクラスが生まれるなどの事故も起こりやすく、\n管理がとても複雑になる、といった問題もあります。</p>\n<p>また、デザインとHTMLコードは強固に結びついているため、\nデザインの変更に対して、HTMLの修正も頻繁に起こりやすくなる傾向があります。</p>\n<h3 id=\"ui%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E5%90%8D%E5%89%8D%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E8%80%83%E3%81%88%E6%96%B9\"><a class=\"header-anchor\" href=\"#ui%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E5%90%8D%E5%89%8D%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E8%80%83%E3%81%88%E6%96%B9\" aria-hidden=\"true\">#</a> UIに対して名前をつける考え方</h3>\n<p><code>btn</code> や <code>alerts</code> など ページ上のUI要素単位に名前をつけて管理する方法です。</p>\n<p>サイト内で利用されているUI間で見た目が常に同じとなることが保証されるため、\nコンポーネントベースでのデザインを表現する上でとても便利です。</p>\n<p>逆にコンポーネントを意識しないデザインに置いて、\n同じUIが、細部異なる見た目を持っている…といったケースでは対応が困難になってきます。</p>\n<p>コンポーネントの設計を行っていたとしても、\n同じボタン群で、色や大きさのバリエーションなどの違いがあるケースもあるため、\nバリエーションの管理には工夫が必要です。</p>\n<p>またレイアウト上の位置によって同じ UI でもマージンなどの微妙な違いは避けられません。\nこの辺りの設計をどれだけ緻密に行い、顧客と共有できるかがコンポーネント設計の鍵となってくるでしょう。</p>\n<p>デザインとHTMLコードの結びつきは比較的緩やかになっているため、\nデザインの変更があっても、単純なUI上の見た目の変化はCSSのみの修正で実装できるでしょう。</p>\n<h3 id=\"oocss%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9\"><a class=\"header-anchor\" href=\"#oocss%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9\" aria-hidden=\"true\">#</a> OOCSSの考え方</h3>\n<p>OOCSS(Object Oriented CSS)は、CSS上でUIを表現する上での、クラス設計の考え方です。</p>\n<p>OOCSS では、UIを構成する要素を、構造と見た目に分けて二つのクラスで見た目を管理します。</p>\n<p><a href=\"http://oocss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">http://oocss.org/<OutboundLink/></a></p>\n<p>// TODO 例の OOCSS のサンプルコード作成</p>\n<p>例では、 <code>btn</code> クラスは、 ボタン要素の構造を、\n<code>btn-red</code> <code>btn-blue</code> 要素は ボタン要素の見た目を提供しています。</p>\n<p>この様に UI 要素の構造と見た目を分けて管理することで、一つの CSS 群から、\n複数のバリエーションを表現する事が可能になります。</p>\n<p>この考え方は SCSS における mixin の設計でも非常に重要なものとなりますので、\n概念としてはしっかり理解しておくほうが良いでしょう。</p>\n<h3 id=\"%E3%82%A2%E3%82%A6%E3%83%88%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E5%90%8D%E5%89%8D%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E8%80%83%E3%81%88%E6%96%B9\"><a class=\"header-anchor\" href=\"#%E3%82%A2%E3%82%A6%E3%83%88%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E5%90%8D%E5%89%8D%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E8%80%83%E3%81%88%E6%96%B9\" aria-hidden=\"true\">#</a> アウトラインに対して名前をつける考え方</h3>\n<p>アウトラインに対して名前をつける場合、HTML上のクラスはそれぞれの文脈に応じて個別のクラス名が付与されるため、\nクラス名の再利用はほとんどされなくなります。</p>\n<p>「何が共通化されるべきで、何を共通化すべきでないか」の検討は、ときに非常に困難であるケースもあり、\nそのような複雑な問題を HTML に持ち込まず、デザイン・見た目の問題をCSS側のみで解決しようとするのがECSS の考え方です。</p>\n<p>HTMLコードは理論上、デザインを意識せず記述することが可能で、デザインとHTMLの結び付きはとても弱いものになります。</p>\n<p>一方でECSSには、CSSのサイズが冗長になるという欠点も抱えており、\n多様なページで似たようなコンポーネントが使い回されている際に特に問題になりがちです。</p>\n<p>サイトの規模感と見合わせながら、適宜クラスセレクタの再利用を検討する事も、時に重要になってくるでしょう。</p>\n<h3 id=\"bem\"><a class=\"header-anchor\" href=\"#bem\" aria-hidden=\"true\">#</a> BEM</h3>\n<p>これまでの議論とはこの異なり、BEMはクラスの命名ルールに関する考え方を提供してくれるものです。</p>\n<p>BEM は Block-Element-Modifier の略語で、CSS の命名を以下の形で考えます。</p>\n<ul>\n<li>命名に関する要素を <code>Block</code> <code>Element</code> <code>Modifier</code>の３つで考える。</li>\n<li><code>Block</code> は 要素の大きなグループを表す。</li>\n<li><code>Element</code> は <code>Block</code> 内の 小要素を表す。</li>\n<li><code>Modifier</code> は <code>Block</code> <code>Element</code> の状態を表現する。</li>\n<li>クラス名における <code>Block</code> <code>Element</code> <code>Modifier</code> は それぞれ適切な記号を用いて区切って表現される</li>\n<li><code>Element</code> は単独で用いられる、 必ず <code>Block</code> とセットで表現される。</li>\n</ul>\n<p>TODO https://storage.googleapis.com/doha-api/uploads/2017/11/24/982c830552af.png みたいな画像</p>\n<p>通常、 <code>BEM</code> では <code>block__element--modifier</code> の様に <code>__</code> <code>--</code> などの記号２つ分の区切り文字を用いて表現されるケースが多いようです。</p>\n<h3 id=\"flocss%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9\"><a class=\"header-anchor\" href=\"#flocss%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9\" aria-hidden=\"true\">#</a> FLOCSSの考え方</h3>\n<p>FLOCSSはさまざまなCSSプロジェクトの中で、ECSSやUIベースのCSSなどを柔軟に適用するための手法です。</p>\n<p><a href=\"https://github.com/hiloki/flocss\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/hiloki/flocss<OutboundLink/></a></p>\n<p>FLOCSS では CSS を以下のようなレイヤーに分けて記述します。</p>\n<!--beforebegin--><div class=\"language-text extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>- Foundation - reset/normalize/base...\n- Layout - header/main/sidebar/footer...\n- Object\n    - Component - grid/button/form/media...\n    - Project - articles/ranking/promo...\n    - Utility - clearfix/display/margin...\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>Foundation</code> や <code>Layout</code> は SMACSS ベースのベース・レイアウトのCSSの考え方です。</p>\n<p>SMACSS で言うところの 再利用可能なモジュールは Component に、\nその他の アウトラインアウトラインベースでのページ固有の CSS は Project に格納されます。</p>\n<p>Component の CSS と Project の CSS は それぞれ <code>c-</code> <code>p-</code> の接頭辞を用いて命名され、\n接頭辞以降のクラス名は 原則 BEM に沿って命名されます。</p>\n<p>Utility は 軽微なスタイルの調整などを 記述する 汎用 CSS を定義することもでき、\n<code>.mt10</code> などのマージンクラスを定義する余地もここに残っています。</p>\n<h2 id=\"%E8%A9%B3%E7%B4%B0%E5%BA%A6%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9\"><a class=\"header-anchor\" href=\"#%E8%A9%B3%E7%B4%B0%E5%BA%A6%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9\" aria-hidden=\"true\">#</a> 詳細度の考え方</h2>\n<p>CSS を記述する上で、詳細度に関しても少し考慮する必要があります。</p>\n<p>詳細度は CSS を適用する上での強さを表すセレクタの持つ数値です。</p>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/Specificity\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/ja/docs/Web/CSS/Specificity<OutboundLink/></a></p>\n<p>既存の CSS 記述を 別の CSS 定義を用いて後から上書き変更しようとした場合、\n元の 詳細度よりも強い詳細度を用いる必要があります。</p>\n<p>ID セレクタは、一般に非常に強い詳細度を持っているため、\nクラス等で記述する CSS を用いてこれを上書きする事ができなくなってしまいます。</p>\n<p>同様に <code>style</code> 属性を用いた直接のスタイル定義も、非常に強い詳細度を持つため、\n他の CSS を用いてこれを上書き変更することができません。</p>\n<p>クラスセレクタを利用したケースでも、子孫セレクタを用いた指定は、\n継承を追うごとにどんどんと詳細度が高くなってしまいます。</p>\n<p>// CodePenで継承の例</p>\n<p>CSSセレクタにおける親子セレクタの深さ定義は、全体で上限を設ける方が良いでしょう。</p>\n</ContentSlotsDistributor>\n",null]}