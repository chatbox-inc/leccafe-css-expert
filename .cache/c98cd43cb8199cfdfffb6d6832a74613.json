{"remainingRequest":"/Users/mkkn/work/book/css-expert/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/mkkn/work/book/css-expert/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/mkkn/work/book/css-expert/pages/2.レスポンシブデザイン.md?vue&type=template&id=7e326fce&","dependencies":[{"path":"/Users/mkkn/work/book/css-expert/pages/2.レスポンシブデザイン.md","mtime":1546500229682},{"path":"/Users/mkkn/work/book/css-expert/node_modules/cache-loader/dist/cjs.js","mtime":1546347112879},{"path":"/Users/mkkn/work/book/css-expert/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1546347116044},{"path":"/Users/mkkn/work/book/css-expert/node_modules/cache-loader/dist/cjs.js","mtime":1546347112879},{"path":"/Users/mkkn/work/book/css-expert/node_modules/vue-loader/lib/index.js","mtime":1546347116044},{"path":"/Users/mkkn/work/book/css-expert/node_modules/@vuepress/markdown-loader/index.js","mtime":1546347404567}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B7%E3%83%96%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%81%A8%E5%8D%98%E4%BD%8D\"><a class=\"header-anchor\" href=\"#%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B7%E3%83%96%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%81%A8%E5%8D%98%E4%BD%8D\" aria-hidden=\"true\">#</a> レスポンシブデザインと単位</h1>\n<p>異なるデバイス上でコンテンツのレイアウトを柔軟に変化させるデザインの手法を レスポンシブデザインといいます。</p>\n<p>スマートフォンが完全に普及し、インターネットの閲覧デバイスとしての地位を確かにした今、\nWebサイトを 多様なデバイスに対応させることのニーズは非常に高くなっています。</p>\n<p>一言にレスポンシブと言っても、考慮すべきポイントは様々です。\nマルチデバイス対応の肝となるレスポンシブの考え方とテクニックを確認していきましょう。</p>\n<h2 id=\"%E3%83%9E%E3%83%AB%E3%83%81%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3\"><a class=\"header-anchor\" href=\"#%E3%83%9E%E3%83%AB%E3%83%81%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3\" aria-hidden=\"true\">#</a> マルチデバイスのデザイン</h2>\n<p>PCの画面(以下 PC) と スマートフォンなどの小さい画面(以下SP) など異なるデバイス上でのデザインを考える上で、\n単純な画面サイズの違い以外にも様々な問題を考慮しなければなりません。</p>\n<p>レスポンシブの手法を考える前に、\nマルチデバイスでのデザインを考慮する上で重要な点を考えてみましょう。</p>\n<h3 id=\"%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%B3%E3%81%AE%E7%94%BB%E9%9D%A2%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%B8%E3%81%AE%E9%81%A9%E5%90%88\"><a class=\"header-anchor\" href=\"#%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%B3%E3%81%AE%E7%94%BB%E9%9D%A2%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%B8%E3%81%AE%E9%81%A9%E5%90%88\" aria-hidden=\"true\">#</a> スマートフォンの画面サイズへの適合</h3>\n<p>マルチデバイスを考える上で画面サイズの違いは大きな問題です。</p>\n<p>一般的に、スマートフォンは、PC よりも小さな画面サイズとなっており、\nPC で横並びに表示していたコンテンツが、 スマートフォンでは縦並びに調整しなければならない、\nと言った問題は多々発生します。</p>\n<p>デザインを考える上では、横のサイズだけでなく、縦のサイズも考慮しなければならないため、\n単純に PC のコンテンツを SP 向けに縦並びに調整するだけでは、\nSP の画面コンテンツはダラダラと長い印象を持つようになるでしょう。</p>\n<p>コンテンツの長さを適切な長さに納めるためには、\nSPでの表示を考慮しながら 画面の小さいサイズをベースにコンテンツ量の切り分けを考える必要があるでしょう。</p>\n<h3 id=\"%E5%A4%A7%E3%81%8D%E3%81%AA%E7%94%BB%E9%9D%A2%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%B8%E3%81%AE%E9%81%A9%E5%90%88\"><a class=\"header-anchor\" href=\"#%E5%A4%A7%E3%81%8D%E3%81%AA%E7%94%BB%E9%9D%A2%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%B8%E3%81%AE%E9%81%A9%E5%90%88\" aria-hidden=\"true\">#</a> 大きな画面サイズへの適合</h3>\n<p>小さな画面サイズだけでなく大きな画面サイズへの適合も重要な問題です。</p>\n<p>最近では PC でも 画面幅 100% でコンテンツを表示するWebサイトが増えてきていますが、\n無限に 幅 100% でコンテンツを展開し続けるのは非常に困難です。</p>\n<p>最近では 4K のディスプレイが登場したり、 Mac でも 3K 程度の解像度で画面を出力することが可能になってきているため、\nFullHD 相当のブラウザではきれいに表示できていても、大きな解像度のモニタで全画面表示するとサイトデザインが崩れる…といったケースも出てくるかもしれません。</p>\n<p>増え続ける解像度に無限に対応するのは困難ですので、適切なコンテナでコンテンツの表示領域を制限し、\n幅 100% で展開するのは、背景色やボーダーなどのデザイン要素のみに絞る方が良いでしょう。</p>\n<h3 id=\"%E7%95%B0%E3%81%AA%E3%82%8Bui-%E3%81%B8%E3%81%AE%E5%AF%BE%E5%BF%9C\"><a class=\"header-anchor\" href=\"#%E7%95%B0%E3%81%AA%E3%82%8Bui-%E3%81%B8%E3%81%AE%E5%AF%BE%E5%BF%9C\" aria-hidden=\"true\">#</a> 異なるUI への対応</h3>\n<p>複数の画面サイズに対応する上で、異なるデバイスのUI上の都合も考慮する必要があるでしょう。</p>\n<p>スマートフォンやタブレットなどのタッチデバイスは、\nWeb ブラウザ上のホバーの機能が乏しく、\nまたドラッグを用いたつかみの操作や、水平方向のフリックがやりづらいという課題があります。</p>\n<p>クリック領域についても SPにおけるデザインの場合は押しやすさが重要です。\nポインタで操作する PC と違って、\nタッチデバイスでは指のサイズを考慮した大きなボタンでクリック可能コンテンツを表現しなければなりません。</p>\n<p>逆に 傾き検出やカメラアップロードなどスマートフォン等固有のUIもありますので、\nデバイスごとに UI が異なることを念頭に置きながら、適材適所の UI を構築する必要があります。</p>\n<h3 id=\"%E7%95%B0%E3%81%AA%E3%82%8B%E5%88%A9%E7%94%A8%E5%A0%B4%E9%9D%A2%E3%81%B8%E3%81%AE%E5%AF%BE%E5%BF%9C\"><a class=\"header-anchor\" href=\"#%E7%95%B0%E3%81%AA%E3%82%8B%E5%88%A9%E7%94%A8%E5%A0%B4%E9%9D%A2%E3%81%B8%E3%81%AE%E5%AF%BE%E5%BF%9C\" aria-hidden=\"true\">#</a> 異なる利用場面への対応</h3>\n<p>デバイスが異なれば Webサイト閲覧のシーンも変わってきます。</p>\n<p>PC で Web サイトを閲覧するケースに比べて、\nSP で Web サイトを閲覧するケースでは、ユーザの集中力が低い、という事は比較的ありえるでしょう。\nサイトの流入経路に関しても、ソーシャル関係のシェア流入は比較的 スマートフォンなどモバイル端末からの方が多い化もしれません。</p>\n<p>逆に PC での Web サイト閲覧状況を考慮した場合、\n求めてい情報を獲得するための高度な UI\n協力な入力 UI を利用した操作系が求められていたり、入力などの操作がやりやすい</p>\n<h2 id=\"%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B7%E3%83%96%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3\"><a class=\"header-anchor\" href=\"#%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B7%E3%83%96%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3\" aria-hidden=\"true\">#</a> レスポンシブデザイン</h2>\n<p>以上の考慮を踏まえて、マルチデバイスに柔軟に対応するためのデザインの手法をレスポンシブデザインと言います。</p>\n<p>一般的に レスポンシブデザインでは、\n画面幅に対して柔軟にレイアウトを変化させることで、\nマルチデバイス上での レイアウト変更を実現しています。</p>\n<p>このようなレイアウト変更をするための仕組みとして、\n画面幅に応じて異なる CSS プロパティを適用させる\nメディアクエリと呼ばれる仕組みが用意されています。</p>\n<p>マルチデバイスをサポートしているとしても、\nPC と SP で別々の URL が用意されていたり、\nブラウザの User Agent (UA) を判別して異なるHTMLをサーバから返信するといったような手法は、\nレスポンシブデザインとは違ったアプローチとなります。</p>\n<h3 id=\"%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%83%95%E3%82%A1%E3%83%BC%E3%82%B9%E3%83%88%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9\"><a class=\"header-anchor\" href=\"#%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%83%95%E3%82%A1%E3%83%BC%E3%82%B9%E3%83%88%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9\" aria-hidden=\"true\">#</a> モバイルファーストの考え方</h3>\n<p>モバイルファーストとは、「モバイル向けの画面を最重視する」という意味合いの考え方です。</p>\n<p>前述の通り、コンテンツの表示量を考えた際に PC 優先で考え始めると、\nどうしても モバイル側にレイアウトを変換した際に、表示量が溢れてメリハリのないサイト構成になってしまいがちです。</p>\n<p>「モバイルでの見え方」さらには「モバイルでのユーザ体験」を重視してデザインを考えることで、\nレスポンシブ対応に関するコストは大きく削減できる筈です。</p>\n<h3 id=\"%E3%83%96%E3%83%AC%E3%82%A4%E3%82%AF%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\"><a class=\"header-anchor\" href=\"#%E3%83%96%E3%83%AC%E3%82%A4%E3%82%AF%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\" aria-hidden=\"true\">#</a> ブレイクポイント</h3>\n<p>マルチデバイスを考える上で、レイアウトの分岐点となるポイントをブレイクポイントといいます。</p>\n<p>デザインの中で要素ごとにブレイクポイントを考えるのは、コーディング管理が非常に煩雑になるため、\nサイト全体で ブレイクポイントの種類を予め決めておく方が良いでしょう。</p>\n<p>一般的にサイトで一つのブレイクポイントを設定する際には、\nスマートフォンと タブレットの一般的な分岐点である <code>768px</code>  がブレイクポイントとして用いられることが多いようです。</p>\n<p>この場合、SP 向けの <code>320-768px</code> の画面幅では、画面幅に比例した <code>%</code> ベースのコーディングを行います。\nコンテナサイズも <code>width: 100%</code> として画面サイズに応じて柔軟に変化するコンテナを採用します。</p>\n<p><code>768px</code> 以上の画面では <code>768px</code> のコンテナサイズでコンテンツ表示幅を制限してサイトをデザインします。</p>\n<p><code>768px</code> のコンテナが小さすぎる場合、２つめ、３つめのコンテナサイズを設定してブレイクポイントに追加すると良いでしょう。</p>\n<p><img src=\"/images/sec2/File.jpg\" alt=\"\"></p>\n<blockquote>\n<p>image from <a href=\"http://responsive-jp.com\" target=\"_blank\" rel=\"noopener noreferrer\">http://responsive-jp.com<OutboundLink/></a></p>\n</blockquote>\n<h3 id=\"%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B7%E3%83%96%E3%81%97%E3%81%AA%E3%81%84%E9%81%B8%E6%8A%9E%E8%82%A2\"><a class=\"header-anchor\" href=\"#%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B7%E3%83%96%E3%81%97%E3%81%AA%E3%81%84%E9%81%B8%E6%8A%9E%E8%82%A2\" aria-hidden=\"true\">#</a> レスポンシブしない選択肢</h3>\n<p>全ての Web デザインや UI がレスポンシブと相性が良いというわけではありません。</p>\n<p>例えば gmail や github などでは、PC と SP で全く異なる デザインを適用しています。\nPC 向けサイトのコンテンツ量が多い場合や、 UI が複雑な場合などは、\nあえてレスポンシブデザインを適用せずに、別々のサイトを用意するケースも考えられます。</p>\n<p>また最近ちらほら目にするようになりましたが、\nスマホからの利用がほとんどのWebサイトに置いては、\n横 640px 程度のWebサイトのみ作成して、PC向けの最適化を行わないという選択肢も考えられます。</p>\n<p>ユーザからの確実なシェアを狙いたい場合など確実に モバイル端末でアクセスしてほしい場合には、\nPC 向けのサイトではコンテンツを何も表示せず、 SP 閲覧用の QR コードのみ表示する、といったケースも考えられます。</p>\n<h2 id=\"%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9\"><a class=\"header-anchor\" href=\"#%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9\" aria-hidden=\"true\">#</a> メディアクエリの書き方</h2>\n<p>CSS で レスポンシブデザインを実現するには、\nメディアクエリを利用して画面幅ごとに異なるCSSを記述する方法が一般的です。</p>\n<p>PC をベースにした メディアクエリの書き方は以下のようになります。</p>\n<!--beforebegin--><div class=\"language-css extra-class\"><!--afterbegin--><pre v-pre class=\"language-css\"><code><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n \n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen and <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span>768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> \n\t<span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen and <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span>480px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> \n\t<span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>PCをベースにするため PC 向けの CSS を記述した上で、\nメディアクエリ内で、 SP 向けの CSS 定義を記述していきます。</p>\n<p>指定したサイズ以下の画面幅に対して メディアクエリの内容を適用するため、<code>max-width</code> の条件式を利用しています。</p>\n<p>逆にSPをベースにする場合、以下のような CSS が出来上がるでしょう。</p>\n<!--beforebegin--><div class=\"language-css extra-class\"><!--afterbegin--><pre v-pre class=\"language-css\"><code><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n \n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span>768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> \n\t<span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span>1024px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> \n\t<span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>こちらは、SPをベースにするため SP 向けの CSS を記述した上で、\nメディアクエリ内で、 PC 向けの CSS 定義を記述していきます。</p>\n<p>指定したサイズ以上の画面幅に対して メディアクエリの内容を適用するため、<code>min-width</code> の条件式を利用しています。</p>\n<p>メディアクエリが無くても max-width や min-width の記述を利用して簡易的にレスポンシブデザインを実現することも可能です。</p>\n<h3 id=\"%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%B3%E5%90%91%E3%81%91%E3%81%AEcss\"><a class=\"header-anchor\" href=\"#%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%B3%E5%90%91%E3%81%91%E3%81%AEcss\" aria-hidden=\"true\">#</a> スマートフォン向けのCSS</h3>\n<p>コンテナ幅 = 画面幅となる スマートフォン向けの CSS では、\n横幅を <code>%</code> を用いてコーディングするなどして、コンテナから要素が溢れないように注意する必要があります。</p>\n<p>複数の画面幅で適切にコンテンツを表示できるよう注意が必要ですが、\niphone5 や iphone SE、古い Android などをターゲットデバイスに含める場合は、\n<code>320px</code> での表示確認を必ず行う必要があります。</p>\n<p>テキストコンテンツなどは、画面幅のサイズに応じて折り返し量が大きく異なるため、\n各画面幅での表示量の違いに十分注意する必要があります。</p>\n<h3 id=\"pc-%E5%90%91%E3%81%91%E3%81%AEcss\"><a class=\"header-anchor\" href=\"#pc-%E5%90%91%E3%81%91%E3%81%AEcss\" aria-hidden=\"true\">#</a> PC 向けのCSS</h3>\n<p>コンテンツは基本、固定幅のコンテンツ内部に収めて、\n画面幅の変化に影響されないレイアウトの構築が望ましいです。</p>\n<p>コンテナから外れて、画面幅全体に対してデザインを適用する場合、\n大画面にも対応するために4k 等での表示確認を念の為行うのが良いでしょう(Chrome の検証ツール)</p>\n<h3 id=\"%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81%E6%96%B9\"><a class=\"header-anchor\" href=\"#%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81%E6%96%B9\" aria-hidden=\"true\">#</a> メディアクエリのまとめ方</h3>\n<p>CSS全体でどのようなメディアクエリを記述するかの方針は予め決めておく必要があります。</p>\n<p>通常の CSS と メディアクエリでの CSS を分離する書き方を採用する場合、\n以下のような CSS の書き方になります。</p>\n<!--beforebegin--><div class=\"language-css extra-class\"><!--afterbegin--><pre v-pre class=\"language-css\"><code><span class=\"token selector\">.title</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.body</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n \n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span>768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> \n\t<span class=\"token selector\">.title</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\">.body</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>メディアクエリの記述が一回で済むため、ブレイクポイントの管理は簡単になります。</p>\n<p>PC 版のコーディングを一旦完成させてから、\n別の担当者が メディアクエリで SP 版をコーディングしていく際などには便利な書き方かもしれませんが、\n一つのコンポーネントに対して、CSS の記述が乱立するためサイト全体の管理としては都合が悪いケースもあるでしょう。</p>\n<p>要素ごとにまとめて メディアクエリを記述する場合、以下のように複数回のメディアクエリの記述が発生します。</p>\n<!--beforebegin--><div class=\"language-css extra-class\"><!--afterbegin--><pre v-pre class=\"language-css\"><code><span class=\"token selector\">.title</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span>768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> \n\t<span class=\"token selector\">.title</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.body</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span>768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token selector\">.body</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>要素ごとに CSS を探す場合こちらの CSS 記述のほうが目的の CSS に到達しやすく改修の手間も少ないですが、\n何回もメディアクエリを記述する手間や、様々な箇所で記述されている メディアクエリを管理するコストは大きくなります。</p>\n<p>SCSS を利用する場合は mixin を利用して簡単にこれを記述することができます。</p>\n<!--beforebegin--><div class=\"language-scss extra-class\"><!--afterbegin--><pre v-pre class=\"language-scss\"><code><span class=\"token keyword\">@mixin</span> <span class=\"token function\">desktop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">@content</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-scss extra-class\"><!--afterbegin--><pre v-pre class=\"language-scss\"><code><span class=\"token selector\">.title </span><span class=\"token punctuation\">{</span> \n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">@include</span> <span class=\"token selector\">desktop</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.body </span><span class=\"token punctuation\">{</span> \n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">@include</span> <span class=\"token selector\">desktop</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>mixinを使うのが複雑な場合、 最低限 <code>768px</code> などの ブレイクポイントだけは変数化して共通化できるようにしておきましょう。</p>\n<h3 id=\"flexbox-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B7%E3%83%96%E3%81%99%E3%82%8B\"><a class=\"header-anchor\" href=\"#flexbox-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B7%E3%83%96%E3%81%99%E3%82%8B\" aria-hidden=\"true\">#</a> Flexbox を利用してレスポンシブする</h3>\n<p>PC 版では横並びに表示するコンテンツを SP 版では縦に表示する、\nと言ったよくあるレスポンシブのパターンは、\nflexbox を使って簡単に表現する事ができます。</p>\n<p>flexbox を利用したレスポンシブの場合、 メディアクエリで <code>flex-wrap</code> の値を調整するだけで\nPC 版では一列に横並び、 SP 版では 縦に並べる、といった表現が可能です。</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"BvQqwZ\" data-default-tab=\"css,result\" data-user=\"mikakane\" data-pen-title=\"BvQqwZ\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/mikakane/pen/BvQqwZ/\">BvQqwZ</a> by mikakane (<a href=\"https://codepen.io/mikakane\">@mikakane</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<p>折り返しつつ(<code>flex-wrap: wrap</code>) 3列表示…といったPC 向けデザインのケースでは、\n<code>width</code> や <code>flex-basis</code> をメディアクエリで調整することができます。</p>\n<h2 id=\"css-%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%8D%98%E4%BD%8D\"><a class=\"header-anchor\" href=\"#css-%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%8D%98%E4%BD%8D\" aria-hidden=\"true\">#</a> CSS における単位</h2>\n<h3 id=\"px\"><a class=\"header-anchor\" href=\"#px\" aria-hidden=\"true\">#</a> <code>px</code></h3>\n<p><code>px</code> は画面のピクセルサイズで指定する最も一般的な単位です。</p>\n<p><code>1px</code> は実際の画面解像度における <code>1px</code> とは異なり、ブラウザ上での論理解像度の <code>1px</code> とは異なります。</p>\n<p>画面解像度の <code>1px</code> と ブラウザ上での <code>1px</code> の差のことを デバイスピクセル比(device pixel ratio) といい、\n最近のモバイル端末では <code>2-4</code> 程度の値が取られているようです。</p>\n<p>モバイル端末で画像がぼやけるといった問題は、この デバイスピクセル比に起因するもので、\nターゲット端末のデバイスピクセル比に対して適切なサイズの画像を用意しなければなりません。</p>\n<h3 id=\"%25\"><a class=\"header-anchor\" href=\"#%25\" aria-hidden=\"true\">#</a> <code>%</code></h3>\n<p><code>%</code> は　親要素に対する相対的な割合を指定する際に有効な単位です。</p>\n<p>コンテナ幅 = 画面サイズのような、幅が変化するデザインにおいては、\n幅の指定を <code>%</code> でコーディングするか、\n<code>max-width</code> などの指定を行い、コンテナから要素が溢れてしまうことのないように注意しましょう。</p>\n<h3 id=\"em\"><a class=\"header-anchor\" href=\"#em\" aria-hidden=\"true\">#</a> <code>em</code></h3>\n<p>em は要素のフォントサイズ(文字の高さ)を <code>1em</code> とする単位です。</p>\n<p>font-size で <code>em</code> を利用する場合、親要素(親要素がない場合はルート)の font-size を 1em とする値になります。\nそれ以外の値に em を使用した場合、 その要素の font-size を 1em とする値になります。</p>\n<p>文字サイズに合わせてデザインを行いたい場合に便利で、\n例えば１文字分の余白を左右に設けたい、といった場合では、以下のようなCSS を記述することができます。</p>\n<!--beforebegin--><div class=\"language-css extra-class\"><!--afterbegin--><pre v-pre class=\"language-css\"><code><span class=\"token selector\">.text</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0 1em<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"rem\"><a class=\"header-anchor\" href=\"#rem\" aria-hidden=\"true\">#</a> <code>rem</code></h3>\n<p><code>em</code> が現在の要素のフォントサイズに対する単位だったのに対し、\n<code>rem</code> はルートの フォントサイズに対する単位として機能します。</p>\n<p>ルートのフォントサイズは通常、以下のようにして <code>html</code> 要素に対する CSS 定義で指定します。</p>\n<!--beforebegin--><div class=\"language-css extra-class\"><!--afterbegin--><pre v-pre class=\"language-css\"><code><span class=\"token selector\">html</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>ブラウザは標準では ルートのフォントサイズが 16px になっているケースがほとんどですが、\nコーディングで px の代わりに rem を多用する場合、\nサイト内で、<code>x rem</code> の値を計算するのを簡便にするために、ルートのフォントサイズを <code>10px</code> に設定するケースが多いようです。</p>\n<p>またブラウザのフォントサイズをユーザが変更している場合等に考慮して、\n直接 10px と指定するのではなく <code>font-size: 62.5%</code> として 標準 <code>10px</code> を再現する場合もあります。</p>\n<p>また、ルートに対するフォントサイズ指定であることを明記するために\n<code>html</code> の代わりに <code>:root</code> を用いることもできます。</p>\n<!--beforebegin--><div class=\"language-css extra-class\"><!--afterbegin--><pre v-pre class=\"language-css\"><code><span class=\"token selector\">:root</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>:root</code>は、詳細度が高いことを除けば <code>html</code> と同等です。</p>\n<p>https://developer.mozilla.org/ja/docs/Web/CSS/:root</p>\n<h3 id=\"vw-vh\"><a class=\"header-anchor\" href=\"#vw-vh\" aria-hidden=\"true\">#</a> <code>vw</code> <code>vh</code></h3>\n<p><code>vw</code> <code>vh</code> は画面の高さ、幅に依存した単位として機能します。</p>\n<p>100vw は 画面幅と、 100vh は画面の高さと同等です。\n概ねルートに対する <code>%</code> と同じような働きをしますが、\n<code>vw</code> <code>vh</code> はブラウザのスクロールバーも含んだサイズとなる点が <code>%</code> と異なります。</p>\n<p><code>vw</code> を利用して画面幅に合わせて変化する正方形の CSS 定義を行うことができます。</p>\n<!--beforebegin--><div class=\"language-css extra-class\"><!--afterbegin--><pre v-pre class=\"language-css\"><code><span class=\"token selector\">.box</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 20vw<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 20vw<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></ContentSlotsDistributor>\n",null]}